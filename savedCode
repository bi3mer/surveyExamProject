// survey user answer
if(questionInfo.getString("type").equals("trueFalse"))
						{
							trueFalse question = new trueFalse(questionInfo.getString("question"),null,questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("shortAnswer"))
						{
							shortAnswer question = new shortAnswer(questionInfo.getString("question"),null,questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("essay"))
						{
							Essay question = new Essay(questionInfo.getString("question"),null,questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("multipleChoice"))
						{
							MultipleChoice question = new MultipleChoice(questionInfo.getString("question"), null,null,questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("match"))
						{
							Match question = new Match(questionInfo.getString("question"), null,null,questionInfo.getString("type"));
							
							JSONArray matchArr = questionInfo.getJSONArray("user_answers");
							ArrayList<String> userAnswer = new ArrayList<String>();
							for(int k = 0;k<matchArr.length();k++)
							{
								JSONObject multiObj = matchArr.getJSONObject(k);
								userAnswer.add(multiObj.getString("answer"));
							}
							question.setUserAnswer(userAnswer);
							
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("rank"))
						{							
							Rank question = new Rank(questionInfo.getString("question"), null,null,questionInfo.getString("type"));
							
							JSONArray matchArr = questionInfo.getJSONArray("user_answers");
							ArrayList<String> userAnswer = new ArrayList<String>();
							for(int k = 0;k<matchArr.length();k++)
							{
								JSONObject multiObj = matchArr.getJSONObject(k);
								userAnswer.add(multiObj.getString("answer"));
							}
							question.setUserAnswer(userAnswer);
							
							user_answers.add(question);
						} 
						else
						{
							System.out.println("Error: exam corrupt, invalid " + questionInfo.getString("type") +" type");
							return null;
						}

// exam user answer
if(questionInfo.getString("type").equals("trueFalse"))
						{
							trueFalse question = new trueFalse(questionInfo.getString("question"),questionInfo.getString("answer"),questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("shortAnswer"))
						{
							shortAnswer question = new shortAnswer(questionInfo.getString("question"),questionInfo.getString("answer"),questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("essay"))
						{
							Essay question = new Essay(questionInfo.getString("question"),null,questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("multipleChoice"))
						{
							MultipleChoice question = new MultipleChoice(questionInfo.getString("question"), null,questionInfo.getString("answer"),questionInfo.getString("type"));
							ArrayList<String> userAnswer = new ArrayList<String>();
							userAnswer.add(questionInfo.getString("user_answer"));
							question.setUserAnswer(userAnswer);
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("match"))
						{
							JSONArray matchArr = questionInfo.getJSONArray("answers");
							ArrayList<String> answers = new ArrayList<String>();
							for(int k = 0;k<matchArr.length();k++)
							{
								JSONObject multiObj = matchArr.getJSONObject(k);
								answers.add(multiObj.getString("answer"));
							}

							Match question = new Match(questionInfo.getString("question"), null,answers,questionInfo.getString("type"));
							
							matchArr = questionInfo.getJSONArray("user_answers");
							ArrayList<String> userAnswer = new ArrayList<String>();
							for(int k = 0;k<matchArr.length();k++)
							{
								JSONObject multiObj = matchArr.getJSONObject(k);
								userAnswer.add(multiObj.getString("answer"));
							}
							question.setUserAnswer(userAnswer);
							
							user_answers.add(question);
						} 
						else if (questionInfo.getString("type").equals("rank"))
						{
							JSONArray matchArr = questionInfo.getJSONArray("answers");
							ArrayList<String> answers = new ArrayList<String>();
							for(int k = 0;k<matchArr.length();k++)
							{
								JSONObject multiObj = matchArr.getJSONObject(k);
								answers.add(multiObj.getString("answer"));
							}
							
							Rank question = new Rank(questionInfo.getString("question"), null,answers,questionInfo.getString("type"));
							
							matchArr = questionInfo.getJSONArray("user_answers");
							ArrayList<String> userAnswer = new ArrayList<String>();
							for(int k = 0;k<matchArr.length();k++)
							{
								JSONObject multiObj = matchArr.getJSONObject(k);
								userAnswer.add(multiObj.getString("answer"));
							}
							question.setUserAnswer(userAnswer);
							
							user_answers.add(question);
						} 
						else
						{
							System.out.println("Error: exam corrupt, invalid " + questionInfo.getString("type") +" type");
							return null;
						}

// survey factory code
if(questionInfo.getString("type").equals("trueFalse"))
					{
						trueFalse question = new trueFalse(questionInfo.getString("question"),null,questionInfo.getString("type"));
						survey.add(question);
					} 
					else if (questionInfo.getString("type").equals("shortAnswer"))
					{
						shortAnswer question = new shortAnswer(questionInfo.getString("question"),null,questionInfo.getString("type"));
						survey.add(question);
					} 
					else if (questionInfo.getString("type").equals("essay"))
					{
						Essay question = new Essay(questionInfo.getString("question"),null,questionInfo.getString("type"));
						survey.add(question);
					} 
					else if (questionInfo.getString("type").equals("multipleChoice"))
					{
						JSONArray multichoiceArr = questionInfo.getJSONArray("answers");
						ArrayList<String> answers = new ArrayList<String>();
						for(int j = 0;j<multichoiceArr.length();j++){
							JSONObject multiObj = multichoiceArr.getJSONObject(j);
							answers.add(multiObj.getString("answer"));
						}
						MultipleChoice question = new MultipleChoice(questionInfo.getString("question"), answers,null,questionInfo.getString("type"));
						survey.add(question);
					} 
					else if (questionInfo.getString("type").equals("match"))
					{
						JSONArray matchArr = questionInfo.getJSONArray("answers");
						ArrayList<String> answers = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							answers.add(multiObj.getString("answer"));
						}
						matchArr = questionInfo.getJSONArray("options");
						ArrayList<String> options = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							options.add(multiObj.getString("option"));
						}
						Match question = new Match(questionInfo.getString("question"), options,answers,questionInfo.getString("type"));
						survey.add(question);
					} 
					else if (questionInfo.getString("type").equals("rank"))
					{
						/*
						JSONArray matchArr = questionInfo.getJSONArray("answers");
						ArrayList<String> answers = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							answers.add(multiObj.getString("answer"));
						}
						*/
						JSONArray matchArr = questionInfo.getJSONArray("options");
						ArrayList<String> options = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							options.add(multiObj.getString("option"));
						} //answers go to null
						
						Rank question = new Rank(questionInfo.getString("question"), options,null,questionInfo.getString("type"));
						survey.add(question);
					} 
					else
					{
						System.out.println("Error: survey corrupt, invalid " + questionInfo.getString("type") +" type");
						return null;
					}

// Exam factory code
if(questionInfo.getString("type").equals("trueFalse"))
					{
						trueFalse question = new trueFalse(questionInfo.getString("question"),questionInfo.getString("answer"),questionInfo.getString("type"));
						exam.add(question);
					} 
					else if (questionInfo.getString("type").equals("shortAnswer"))
					{
						shortAnswer question = new shortAnswer(questionInfo.getString("question"),questionInfo.getString("answer"),questionInfo.getString("type"));
						exam.add(question);
					} 
					else if (questionInfo.getString("type").equals("essay"))
					{
						Essay question = new Essay(questionInfo.getString("question"),questionInfo.getString("answer"),questionInfo.getString("type"));
						exam.add(question);
					} 
					else if (questionInfo.getString("type").equals("multipleChoice"))
					{
						JSONArray multichoiceArr = questionInfo.getJSONArray("answers");
						ArrayList<String> answers = new ArrayList<String>();
						for(int j = 0;j<multichoiceArr.length();j++){
							JSONObject multiObj = multichoiceArr.getJSONObject(j);
							answers.add(multiObj.getString("answer"));
						}
						MultipleChoice question = new MultipleChoice(questionInfo.getString("question"), answers,questionInfo.getString("answer"),questionInfo.getString("type"));
						exam.add(question);
					} 
					else if (questionInfo.getString("type").equals("match"))
					{
						JSONArray matchArr = questionInfo.getJSONArray("answers");
						ArrayList<String> answers = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							answers.add(multiObj.getString("answer"));
						}
						matchArr = questionInfo.getJSONArray("options");
						ArrayList<String> options = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							options.add(multiObj.getString("option"));
						}
						Match question = new Match(questionInfo.getString("question"), options,answers,questionInfo.getString("type"));
						exam.add(question);
					} 
					else if (questionInfo.getString("type").equals("rank"))
					{
						JSONArray matchArr = questionInfo.getJSONArray("answers");
						ArrayList<String> answers = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							answers.add(multiObj.getString("answer"));
						}
						matchArr = questionInfo.getJSONArray("options");
						ArrayList<String> options = new ArrayList<String>();
						for(int j = 0;j<matchArr.length();j++){
							JSONObject multiObj = matchArr.getJSONObject(j);
							options.add(multiObj.getString("option"));
						}
						Rank question = new Rank(questionInfo.getString("question"), options,answers,questionInfo.getString("type"));
						exam.add(question);
					} 
					else
					{
						System.out.println("Error: exam corrupt, invalid " + questionInfo.getString("type") +" type");
						return null;
					}